name: 'Terraform nginx'

on:
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/nginx
    permissions:
        contents: 'read'
        id-token: 'write'
    outputs:
          extracted_ip: ${{ steps.extract_ip.outputs.host_ip }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Authenticate with GCP
        uses: 'google-github-actions/auth@v2'
        with:
            project_id: 'rish-dev'
            token_format: "access_token"
            service_account: 'my-service-account@rish-dev.iam.gserviceaccount.com'
            workload_identity_provider: 'projects/636883269497/locations/global/workloadIdentityPools/gitcheck/providers/my-gh-repo'
    
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
            skip_install: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

    #   - name: Terraform Format
    #     id: format
    #     run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
    #   -  name: Write secret to file
    #      run: |
    #       cat << EOF > ansible-key
    #       ${{ vars.ANSIBLE_KEY_PLAN }}
    #       EOF
    #   - name: Print key
    #     run: cat ansible-key
    
    #   - name: change permission for key
    #     run: chmod 0600 ansible-key

      - name: Terraform Apply
        run: terraform apply -auto-approve
      - name: Extract VM ip
        id: extract_ip
        run: |
            IP=$(grep -Eo '[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+' inventory)
            if [ -z "$IP" ]; then
                echo "No IP address found in the inventory file."
                exit 1
            fi
            echo "host_ip=${IP}" >> $GITHUB_OUTPUT
            echo "Extracted IP: ${IP}"

  Ansible:
    name: 'Ansible Test'
    needs: terraform
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform/nginx
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Copy folder to remote server
        uses: appleboy/scp-action@v0.1.7
        with:
            host: ${{ needs.terraform.outputs.extracted_ip }}
            username: ansible
            key: ${{ secrets.ANSIBLE_KEY }}
            port: 22
            source: ./terraform/nginx
            target: /tmp/nginx
            timeout: 30s
            command_timeout: 10m
            use_insecure_cipher: false
            rm: false
            debug: false
            strip_components: 0
            overwrite: false
            tar_dereference: false
            tar_exec: tar
            proxy_port: 22
            proxy_timeout: 30s
            proxy_use_insecure_cipher: false
      - name: executing remote ssh commands using key
        uses: appleboy/ssh-action@v1.0.3
        with:
              host: ${{ needs.terraform.outputs.extracted_ip }}
              username: ansible
              key: ${{ secrets.ANSIBLE_KEY }}
              port: 22
              script: |
                cd /tmp/nginx/terraform/nginx
                sudo apt-get install -y ansible
                ansible-playbook playbook.yml

  destroy:
    runs-on: ubuntu-latest
    permissions:
        contents: 'read'
        id-token: 'write'
    defaults:
      run:
        working-directory: ./terraform/nginx
    environment: manual_trigger
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Authenticate with GCP
        uses: 'google-github-actions/auth@v2'
        with:
            project_id: 'rish-dev'
            token_format: "access_token"
            service_account: 'my-service-account@rish-dev.iam.gserviceaccount.com'
            workload_identity_provider: 'projects/636883269497/locations/global/workloadIdentityPools/gitcheck/providers/my-gh-repo'
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Destroy
        run: terraform destroy -auto-approve